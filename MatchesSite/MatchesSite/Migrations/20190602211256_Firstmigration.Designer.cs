// <auto-generated />
using System;
using MatchesSite.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MatchesSite.Migrations
{
    [DbContext(typeof(MatchesDatabaseContext))]
    [Migration("20190602211256_Firstmigration")]
    partial class Firstmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MatchesSite.Models.Bookies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Bookies");
                });

            modelBuilder.Entity("MatchesSite.Models.Countries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MatchesSite.Models.Leagues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int?>("Country");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Country");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("MatchesSite.Models.Matches", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Away");

                    b.Property<int>("Bookie");

                    b.Property<int?>("Country");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Home");

                    b.Property<int?>("League");

                    b.Property<int?>("OpportunityId");

                    b.Property<double>("X");

                    b.Property<double>("_1")
                        .HasColumnName("1");

                    b.Property<double>("_2")
                        .HasColumnName("2");

                    b.HasKey("Id");

                    b.HasIndex("Away");

                    b.HasIndex("Bookie");

                    b.HasIndex("Country");

                    b.HasIndex("Hash")
                        .IsUnique()
                        .HasName("UQ_Matches");

                    b.HasIndex("Home");

                    b.HasIndex("League");

                    b.HasIndex("OpportunityId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("MatchesSite.Models.Opportunities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Away");

                    b.Property<int?>("Country");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Home");

                    b.Property<int>("Id1");

                    b.Property<int>("Id2");

                    b.Property<int>("IdX");

                    b.Property<int?>("League");

                    b.Property<double>("X");

                    b.Property<double>("_1")
                        .HasColumnName("1");

                    b.Property<double>("_2")
                        .HasColumnName("2");

                    b.HasKey("Id");

                    b.HasIndex("Away");

                    b.HasIndex("Country");

                    b.HasIndex("Hash")
                        .IsUnique()
                        .HasName("UQ_Opportunities");

                    b.HasIndex("Home");

                    b.HasIndex("Id1");

                    b.HasIndex("Id2");

                    b.HasIndex("IdX");

                    b.HasIndex("League");

                    b.ToTable("Opportunities");
                });

            modelBuilder.Entity("MatchesSite.Models.Profits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("IsPossible");

                    b.Property<int>("OpportunityId");

                    b.Property<double>("Percent1");

                    b.Property<double>("Percent2");

                    b.Property<double>("PercentX");

                    b.Property<double>("Roi")
                        .HasColumnName("ROI");

                    b.HasKey("Id");

                    b.HasIndex("OpportunityId");

                    b.ToTable("Profits");
                });

            modelBuilder.Entity("MatchesSite.Models.Teams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Country");

                    b.Property<int?>("League");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Country");

                    b.HasIndex("League");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("MatchesSite.Models.Leagues", b =>
                {
                    b.HasOne("MatchesSite.Models.Countries", "CountryNavigation")
                        .WithMany("Leagues")
                        .HasForeignKey("Country")
                        .HasConstraintName("FK_Leagues_Countries")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MatchesSite.Models.Matches", b =>
                {
                    b.HasOne("MatchesSite.Models.Teams", "AwayNavigation")
                        .WithMany("MatchesAwayNavigation")
                        .HasForeignKey("Away")
                        .HasConstraintName("FK_Matches_Away");

                    b.HasOne("MatchesSite.Models.Bookies", "BookieNavigation")
                        .WithMany("Matches")
                        .HasForeignKey("Bookie")
                        .HasConstraintName("FK_Matches_Bookies");

                    b.HasOne("MatchesSite.Models.Countries", "CountryNavigation")
                        .WithMany("Matches")
                        .HasForeignKey("Country")
                        .HasConstraintName("FK_Matches_Countries");

                    b.HasOne("MatchesSite.Models.Teams", "HomeNavigation")
                        .WithMany("MatchesHomeNavigation")
                        .HasForeignKey("Home")
                        .HasConstraintName("FK_Matches_Home");

                    b.HasOne("MatchesSite.Models.Leagues", "LeagueNavigation")
                        .WithMany("Matches")
                        .HasForeignKey("League")
                        .HasConstraintName("FK_Matches_Leagues");

                    b.HasOne("MatchesSite.Models.Opportunities", "Opportunity")
                        .WithMany("Matches")
                        .HasForeignKey("OpportunityId")
                        .HasConstraintName("FK_Matches_Opportunities");
                });

            modelBuilder.Entity("MatchesSite.Models.Opportunities", b =>
                {
                    b.HasOne("MatchesSite.Models.Teams", "AwayNavigation")
                        .WithMany("OpportunitiesAwayNavigation")
                        .HasForeignKey("Away")
                        .HasConstraintName("FK_Away");

                    b.HasOne("MatchesSite.Models.Countries", "CountryNavigation")
                        .WithMany("Opportunities")
                        .HasForeignKey("Country")
                        .HasConstraintName("FK_Opportunities_Countries");

                    b.HasOne("MatchesSite.Models.Teams", "HomeNavigation")
                        .WithMany("OpportunitiesHomeNavigation")
                        .HasForeignKey("Home")
                        .HasConstraintName("FK_Home");

                    b.HasOne("MatchesSite.Models.Bookies", "Id1Navigation")
                        .WithMany("OpportunitiesId1Navigation")
                        .HasForeignKey("Id1")
                        .HasConstraintName("FK_1");

                    b.HasOne("MatchesSite.Models.Bookies", "Id2Navigation")
                        .WithMany("OpportunitiesId2Navigation")
                        .HasForeignKey("Id2")
                        .HasConstraintName("FK_2");

                    b.HasOne("MatchesSite.Models.Bookies", "IdXNavigation")
                        .WithMany("OpportunitiesIdXNavigation")
                        .HasForeignKey("IdX")
                        .HasConstraintName("FK_X");

                    b.HasOne("MatchesSite.Models.Leagues", "LeagueNavigation")
                        .WithMany("Opportunities")
                        .HasForeignKey("League")
                        .HasConstraintName("FK_Opportunities_Leagues");
                });

            modelBuilder.Entity("MatchesSite.Models.Profits", b =>
                {
                    b.HasOne("MatchesSite.Models.Opportunities", "Opportunity")
                        .WithMany("Profits")
                        .HasForeignKey("OpportunityId")
                        .HasConstraintName("FK_Profits_Opportunities")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MatchesSite.Models.Teams", b =>
                {
                    b.HasOne("MatchesSite.Models.Countries", "CountryNavigation")
                        .WithMany("Teams")
                        .HasForeignKey("Country")
                        .HasConstraintName("FK_Teams_Countries");

                    b.HasOne("MatchesSite.Models.Leagues", "LeagueNavigation")
                        .WithMany("Teams")
                        .HasForeignKey("League")
                        .HasConstraintName("FK_Teams_Leagues");
                });
#pragma warning restore 612, 618
        }
    }
}
